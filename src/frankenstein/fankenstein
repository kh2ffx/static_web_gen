#!/usr/bin/env python3

# old_nodes is a list of old nodes
# text type nodes can be split into multiple nodes based on syntax ex.
# TextNode("text with a `code block`", TextType.TEXT)
# will become
# [
# TextNode("text with a ", TextType.TEXT),
# TextNode("code block", TextType.CODE)
# ]

# Delimiters to handle `for code` **for bold** _for italic_

i#class TextType(Enum):
 #   TEXT = "text"
 #   BOLD_TEXT = "bold"
 #   ITALIC_TEXT = "italic"
 #   CODE_TEXT = "code"
 #   LINK = "link"
 #   IMAGE = "image"

 # Im trying to do this in a way different from what is asked.  Let me start over, but
 # I'm keeping this to come back to.

from textnode import TextType

def split_nodes_delimiter(old_nodes, delimiter, text_type):
    for node in old_nodes:
        match node.text_type:
            case TextType.TEXT:
                return LeafNode(None, text_node.text)
            case TextType.BOLD_TEXT:
                return LeafNode("b", text_node.text)
            case TextType.ITALIC_TEXT:
                return LeafNode("i", text_node.text)
            case TextType.CODE_TEXT:
                return LeafNode("code", text_node.text)
            case TextType.LINK:
                return LeafNode("a", text_node.text, {"href": text_node.url})
            case TextType.IMAGE:
                return LeafNode("img", "", {"src": text_node.url, "alt": text_node.text})
            case _:
                raise ValueError("type not recognized")

    new_nodes = []
    for node in old_nodes:
        new_nodes.append(node.text.split(delimiter))
